<?xml version="1.0" encoding="UTF-8" ?>

<Schemas xmlns="urn:com.io7m.trasco.database.statements:1:0">
  <Schema versionCurrent="0">
    <Comment>
      The idstore role is a least-privilege role that can perform only those
      operations required to run the system and no others. The role is initially
      set to "nologin" as a password will be assigned later and logins enabled.
    </Comment>

    <Statement><![CDATA[
DROP ROLE IF EXISTS idstore;
]]></Statement>
    <Statement><![CDATA[
CREATE ROLE idstore with nosuperuser nocreatedb nocreaterole noinherit nologin;
]]></Statement>

    <Comment>
      The idstore_none role is a no-privilege role that cannot perform any
      actions.
    </Comment>

    <Statement><![CDATA[
DROP ROLE IF EXISTS idstore_none;
]]></Statement>
    <Statement><![CDATA[
CREATE ROLE idstore_none WITH nosuperuser nocreatedb nocreaterole noinherit nologin;
]]></Statement>

    <Comment>
      The schema version table stores the current version of the database
      schema. Implementations are expected to query this table on connecting to
      the database in order to ensure that the calling code is compatible with
      the tables in the database.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE schema_version (
  version_lock            CHAR(1) NOT NULL DEFAULT 'X',
  version_application_id  TEXT    NOT NULL,
  version_number          BIGINT  NOT NULL,

  CONSTRAINT check_lock_primary
    PRIMARY KEY (version_lock),

  CONSTRAINT check_lock_locked
    CHECK (version_lock = 'X')
)
]]></Statement>
  </Schema>

  <Schema versionCurrent="1">
    <Comment>
      Some tables use the hstore type to store unstructured key/value maps.
    </Comment>

    <Statement><![CDATA[
CREATE EXTENSION hstore;
]]></Statement>

    <Comment>
      The database makes extensive use of Lanark dotted names. It's necessary to tokenize those names in order to use
      them with full text searching. Essentially, anything that isn't a letter or a number is converted to a space. This
      translated string can then be given to the various full-text search functions for indexing.
    </Comment>

    <Statement><![CDATA[
-- [jooq ignore start]

CREATE FUNCTION tokenize_dotted_name(x text) RETURNS text
  LANGUAGE SQL
  IMMUTABLE
  RETURNS NULL ON NULL INPUT
    RETURN TRANSLATE (x, '-_.', '   ')

-- [jooq ignore stop]
]]></Statement>

    <Statement><![CDATA[
-- [jooq ignore start]

CREATE OR REPLACE FUNCTION text_array_to_text(TEXT[])
  RETURNS TEXT AS
$$
  SELECT array_to_string($1, ' ');
$$ LANGUAGE SQL IMMUTABLE;

-- [jooq ignore stop]
]]></Statement>

    <Comment>
      The user_ids table stores the ids for users and admins.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE user_ids (
  id uuid NOT NULL PRIMARY KEY
)
]]></Statement>

    <Statement>GRANT SELECT, INSERT, DELETE ON user_ids TO idstore</Statement>

    <Comment>
      The admins table stores the current set of admins.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE admins (
  id               uuid                     NOT NULL PRIMARY KEY,
  id_name          VARCHAR(1000000)         NOT NULL UNIQUE,
  real_name        VARCHAR(1000000)         NOT NULL,
  time_created     TIMESTAMP WITH TIME ZONE NOT NULL,
  time_updated     TIMESTAMP WITH TIME ZONE NOT NULL,
  password_algo    VARCHAR(1000000)         NOT NULL,
  password_hash    VARCHAR(1000000)         NOT NULL,
  password_salt    VARCHAR(1000000)         NOT NULL,
  password_expires TIMESTAMP WITH TIME ZONE,
  permissions      VARCHAR(1000000)         NOT NULL,
  deleting         BOOLEAN                  NOT NULL,
  initial          BOOLEAN                  NOT NULL,

  FOREIGN KEY (id) REFERENCES user_ids (id)
)
]]></Statement>

    <Statement>
      GRANT SELECT, INSERT, UPDATE, DELETE ON admins TO idstore
    </Statement>
    <Statement>
      GRANT SELECT (id) ON admins TO idstore_none
    </Statement>

    <Statement><![CDATA[
CREATE FUNCTION admin_initial_check() RETURNS TRIGGER AS $$
  declare
    count integer;
  begin
    IF old.initial = false and new.initial = true THEN
      SELECT count(*) into count FROM admins a WHERE a.initial = true;
      IF count >= 1 THEN
        RAISE sqlstate 'ID002' USING message = 'Only one admin can be the initial admin.';
        RETURN NULL;
      END IF;
    END IF;
    return old;
  end;
$$ language plpgsql;
]]></Statement>

    <Statement><![CDATA[
CREATE TRIGGER admin_initial_check_insert
  BEFORE INSERT ON admins
    FOR EACH STATEMENT
      EXECUTE FUNCTION admin_initial_check();
]]></Statement>

    <Statement><![CDATA[
CREATE TRIGGER admin_initial_check_update
  BEFORE UPDATE ON admins
    FOR EACH STATEMENT
      EXECUTE FUNCTION admin_initial_check();
]]></Statement>

    <Comment>
      The users table stores the current set of users.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE users (
  id               uuid                     NOT NULL PRIMARY KEY,
  id_name          VARCHAR(1000000)         NOT NULL,
  real_name        VARCHAR(1000000)         NOT NULL,
  time_created     TIMESTAMP WITH TIME ZONE NOT NULL,
  time_updated     TIMESTAMP WITH TIME ZONE NOT NULL,
  password_algo    VARCHAR(1000000)         NOT NULL,
  password_hash    VARCHAR(1000000)         NOT NULL,
  password_salt    VARCHAR(1000000)         NOT NULL,
  password_expires TIMESTAMP WITH TIME ZONE,
  deleting         BOOLEAN                  NOT NULL,

  FOREIGN KEY (id) REFERENCES user_ids (id)
)
]]></Statement>

    <Statement>
      GRANT SELECT, INSERT, UPDATE, DELETE ON users TO idstore
    </Statement>
    <Statement>
      GRANT SELECT (id) ON users TO idstore_none
    </Statement>

    <Statement><![CDATA[
-- [jooq ignore start]
CREATE UNIQUE INDEX users_id_name_index ON users (UPPER(id_name));
-- [jooq ignore stop]
]]></Statement>

    <Comment>
      The emails table stores the set of email addresses used by users/admins.
      Note that email addresses *do* have a unique constraint, but it's enforced
      by a separate index that determines uniqueness based on the lowercase
      email address.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE emails (
  user_id         uuid,
  admin_id        uuid,
  email_address   VARCHAR(1000000) NOT NULL,

  CONSTRAINT check_user_or_admin check (
    (user_id IS NOT NULL) or (admin_id IS NOT NULL)
  ),

  FOREIGN KEY (user_id) REFERENCES users (id),
  FOREIGN KEY (admin_id) REFERENCES admins (id)
)
]]></Statement>

    <Statement>GRANT SELECT, INSERT, DELETE ON emails TO idstore</Statement>

    <Statement><![CDATA[
-- [jooq ignore start]
CREATE UNIQUE INDEX emails_unique_lower_email_idx ON emails (lower(email_address));
-- [jooq ignore stop]
]]></Statement>

    <Comment>
      The email_check_delete trigger enforces the CONSTRAINT that users must
      have at least one email address at any time.
    </Comment>

    <Statement><![CDATA[
CREATE FUNCTION email_check_delete() RETURNS TRIGGER AS $$
  DECLARE
    user_id UUID;
    admin_id UUID;
    count INTEGER;
    deleting BOOLEAN;
  BEGIN
    IF old.user_id IS NULL THEN
      SELECT a.deleting INTO deleting FROM admins a WHERE a.id = old.admin_id;
      SELECT count(email_address) INTO count FROM emails e WHERE e.admin_id = old.admin_id;
      IF count = 1 and (not deleting) THEN
        RAISE sqlstate 'ID001' USING message = 'Cannot remove the last email address for the admin';
        RETURN NULL;
      END IF;
    else
      SELECT u.deleting INTO deleting FROM users u WHERE u.id = old.user_id;
      SELECT count(email_address) INTO count FROM emails e WHERE e.user_id = old.user_id;
      IF count = 1 and (not deleting) THEN
        RAISE sqlstate 'ID001' USING message = 'Cannot remove the last email address for the user';
        RETURN NULL;
      END IF;
    END IF;
    return old;
  END;
$$ LANGUAGE PLPGSQL;
]]></Statement>

    <Statement><![CDATA[
CREATE TRIGGER email_check_delete_trigger
  BEFORE DELETE ON emails
    FOR EACH ROW
      EXECUTE FUNCTION email_check_delete();
]]></Statement>

    <Comment>
      The audit table stores a list of auditable events. Who did it? What did
      they do? When did they do it?
    </Comment>

    <Statement><![CDATA[
CREATE TABLE audit (
  id         BIGINT                   NOT NULL GENERATED ALWAYS AS IDENTITY,
  user_id    UUID                     NOT NULL,
  time       TIMESTAMP WITH TIME ZONE NOT NULL,
  type       TEXT                     NOT NULL,

  -- [jooq ignore start]
  data       HSTORE                   NOT NULL,
  -- [jooq ignore stop]

  FOREIGN KEY (user_id) REFERENCES user_ids (id)
)
]]></Statement>

    <Statement>GRANT INSERT, SELECT ON audit TO idstore</Statement>

    <Comment>
      The login_history table stores a history of user/admin logins.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE login_history (
  user_id        UUID                     NOT NULL,
  time           TIMESTAMP WITH TIME ZONE NOT NULL,
  host           VARCHAR(1000000)         NOT NULL,
  proxied_host   VARCHAR(1000000)         NOT NULL,
  agent          VARCHAR(1000000)         NOT NULL,

  FOREIGN KEY (user_id) REFERENCES user_ids (id)
)
]]></Statement>

    <Statement>GRANT INSERT, SELECT, DELETE ON login_history TO idstore</Statement>

    <Comment>
      The email_verifications table records the email verification operations in
      process. A verification has an associated user/admin, email address,
      verification token, expiration date, and operation. The operation is a
      value of com.io7m.idstore.model.IdEmailVerificationOperation.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE email_verifications (
  user_id       UUID                      NOT NULL,
  email         VARCHAR(1000000)          NOT NULL,
  token_permit  VARCHAR(1000000)          NOT NULL unique,
  token_deny    VARCHAR(1000000)          NOT NULL unique,
  expires       TIMESTAMP WITH TIME ZONE  NOT NULL,
  operation     VARCHAR(1000000)          NOT NULL,

  FOREIGN KEY (user_id) REFERENCES user_ids (id),
  CONSTRAINT tokens_not_equal CHECK (token_permit <> token_deny)
)
]]></Statement>

    <Statement>GRANT INSERT, SELECT, DELETE ON email_verifications TO idstore
    </Statement>

    <Comment>
      The bans table records the reason any given account might be banned, and
      when that ban expires (if it expires).
    </Comment>

    <Statement><![CDATA[
CREATE TABLE bans (
  user_id     UUID                      NOT NULL PRIMARY KEY,
  reason      VARCHAR(1000000)          NOT NULL,
  expires     TIMESTAMP WITH TIME ZONE,

  FOREIGN KEY (user_id) REFERENCES user_ids (id)
)
]]></Statement>

    <Statement>GRANT INSERT, SELECT, UPDATE, DELETE ON bans TO idstore
    </Statement>

    <Comment>
      The user_password_resets table records the password reset operations in
      process. A verification has an associated user, verification token, and
      expiration date.
    </Comment>

    <Statement><![CDATA[
CREATE TABLE user_password_resets (
  user_id     UUID                      NOT NULL,
  token       VARCHAR(1000000)          NOT NULL UNIQUE,
  expires     TIMESTAMP WITH TIME ZONE  NOT NULL,

  FOREIGN KEY (user_id) REFERENCES users (id)
)
]]></Statement>

    <Statement>GRANT INSERT, SELECT, DELETE ON user_password_resets TO idstore
    </Statement>
  </Schema>

  <Schema versionCurrent="2">
    <Comment>
      The idstore_read_only role is a read-only role that can read all data but
      cannot change anything. The role is initially set to "nologin" as a
      password may be assigned later and logins enabled.
    </Comment>

    <Statement><![CDATA[
DROP ROLE IF EXISTS idstore_read_only;
]]></Statement>
    <Statement><![CDATA[
CREATE ROLE idstore_read_only WITH nosuperuser nocreatedb nocreaterole noinherit nologin;
]]></Statement>

    <Statement>
      GRANT SELECT ON admins TO idstore_read_only
    </Statement>
    <Statement>
      GRANT SELECT ON audit TO idstore_read_only
    </Statement>
    <Statement>
      GRANT SELECT ON bans TO idstore_read_only
    </Statement>
    <Statement>
      GRANT SELECT ON email_verifications TO idstore_read_only
    </Statement>
    <Statement>
      GRANT SELECT ON emails TO idstore_read_only
    </Statement>
    <Statement>
      GRANT SELECT ON login_history TO idstore_read_only
    </Statement>
    <Statement>
      GRANT SELECT ON schema_version TO idstore_read_only
    </Statement>
    <Statement>
      GRANT SELECT ON user_ids TO idstore_read_only
    </Statement>
    <Statement>
      GRANT SELECT ON user_password_resets TO idstore_read_only
    </Statement>
    <Statement>GRANT SELECT ON users TO idstore_read_only
    </Statement>
  </Schema>
</Schemas>
