<?xml version="1.0" encoding="UTF-8" ?>

<Schemas xmlns="urn:com.io7m.trasco.database.statements:1:0">
  <Schema versionCurrent="0">
    <Comment>
      The idstore role is a least-privilege role that can perform only those operations required to run the system and
      no others.
    </Comment>

    <Statement><![CDATA[
create role idstore with nosuperuser nocreatedb nocreaterole noinherit nologin;
]]></Statement>

    <Comment>
      The idstore_none role is a no-privilege role that cannot perform any actions.
    </Comment>

    <Statement><![CDATA[
create role idstore_none with nosuperuser nocreatedb nocreaterole noinherit nologin;
]]></Statement>

    <Comment>
      The schema version table stores the current version of the database schema. Implementations are expected to query
      this table on connecting to the database in order to ensure that the calling code is compatible with the tables in
      the database.
    </Comment>

    <Statement><![CDATA[
create table schema_version (
  version_lock   char(1) not null default 'x',
  version_number bigint  not null,

  constraint check_lock_primary primary key (version_lock),
  constraint check_lock_locked check (version_lock = 'x')
)
]]></Statement>
  </Schema>

  <Schema versionCurrent="1">
    <Comment>
      The user_ids table stores the ids for users and admins.
    </Comment>

    <Statement><![CDATA[
create table user_ids (
  id uuid not null primary key
)
]]></Statement>

    <Statement>grant select, insert on user_ids to idstore</Statement>

    <Comment>
      The admins table stores the current set of admins.
    </Comment>

    <Statement><![CDATA[
create table admins (
  id               uuid                     not null primary key,
  id_name          varchar(1000000)         not null unique,
  real_name        varchar(1000000)         not null,
  time_created     timestamp with time zone not null,
  time_updated     timestamp with time zone not null,
  password_algo    varchar(1000000)         not null,
  password_hash    varchar(1000000)         not null,
  password_salt    varchar(1000000)         not null,
  permissions      varchar(1000000)         not null,

  foreign key (id) references user_ids (id)
)
]]></Statement>

    <Statement>grant select, insert, update on admins to idstore</Statement>
    <Statement>grant select (id) on admins to idstore_none</Statement>

    <Comment>
      The users table stores the current set of users.
    </Comment>

    <Statement><![CDATA[
create table users (
  id               uuid                     not null primary key,
  id_name          varchar(1000000)         not null unique,
  real_name        varchar(1000000)         not null,
  time_created     timestamp with time zone not null,
  time_updated     timestamp with time zone not null,
  password_algo    varchar(1000000)         not null,
  password_hash    varchar(1000000)         not null,
  password_salt    varchar(1000000)         not null,

  foreign key (id) references user_ids (id)
)
]]></Statement>

    <Statement>grant select, insert, update on users to idstore</Statement>
    <Statement>grant select (id) on users to idstore_none</Statement>

    <Comment>The emails table stores the set of email addresses used by users/admins.</Comment>

    <Statement><![CDATA[
create table emails (
  user_id         uuid,
  admin_id        uuid,
  email_address   varchar(1000000) not null unique,

  constraint check_user_or_admin check (
    (user_id is not null) or (admin_id is not null)
  ),

  foreign key (user_id) references users (id),
  foreign key (admin_id) references admins (id)
)
]]></Statement>

    <Statement>grant select, insert, delete on emails to idstore</Statement>

    <Comment>
      The email_check_delete trigger enforces the constraint that users must have at least one email address at any
      time.
    </Comment>

    <Statement><![CDATA[
create function email_check_delete() returns trigger as $$
  declare
    user_id uuid;
    admin_id uuid;
    count integer;
  begin
    if old.user_id is null then
      select count(email_address) into count from emails e where e.admin_id = old.admin_id;
      if count = 1 then
        raise sqlstate 'ID001' using message = 'Cannot remove the last email address for the user';
        return null;
      end if;
    else
      select count(email_address) into count from emails e where e.user_id = old.user_id;
      if count = 1 then
        raise sqlstate 'ID001' using message = 'Cannot remove the last email address for the user';
        return null;
      end if;
    end if;
    return old;
  end;
$$ language plpgsql;
]]></Statement>

    <Statement><![CDATA[
create trigger email_check_delete_trigger
  before delete on emails
    for each row
      execute function email_check_delete();
]]></Statement>

    <Comment>
      The audit table stores a list of auditable events. Who did it? What did they do? When did they do it?
    </Comment>

    <Statement><![CDATA[
create table audit (
  id             bigint                   not null primary key generated always as identity,
  user_id        uuid                     not null,
  time           timestamp with time zone not null,
  type           varchar(1000000)         not null,
  message        varchar(1000000)         not null,

  foreign key (user_id) references user_ids (id)
)
]]></Statement>

    <Statement>grant insert, select on audit to idstore</Statement>

    <Comment>
      The login_history table stores a history of user/admin logins.
    </Comment>

    <Statement><![CDATA[
create table login_history (
  user_id        uuid                     not null,
  time           timestamp with time zone not null,
  host           varchar(1000000)         not null,
  agent          varchar(1000000)         not null,

  foreign key (user_id) references user_ids (id)
)
]]></Statement>

    <Statement>grant insert, select, delete on login_history to idstore</Statement>

    <Comment>
      The email_verifications table records the email verification operations in process. A verification has an
      associated user/admin, email address, verification token, expiration date, and operation. The operation is a value
      of com.io7m.idstore.model.IdEmailVerificationOperation.
    </Comment>

    <Statement><![CDATA[
create table email_verifications (
  user_id     uuid                      not null,
  email       varchar(1000000)          not null,
  token       varchar(1000000)          not null unique,
  expires     timestamp with time zone  not null,
  operation   varchar(1000000)          not null,

  foreign key (user_id) references user_ids (id)
)
]]></Statement>

    <Statement>grant insert, select, delete on email_verifications to idstore</Statement>
  </Schema>

</Schemas>
